  constructor(private http: HttpClient, private router: Router, private userService: UserService) { }

  validateUser() {
    const credentials = {
      user: this.user,
      password: this.password,
      email: "",
      typeID: 0
    };

    this.http.post('http://localhost:8080/api/auth/validate', credentials).subscribe(
      (response: any) => {

        localStorage.setItem('token', response.token);
        console.log('vamonos a la dashboard');

        this.router.navigate(['/dashboard']);

        this.http.get('http://localhost:3000/api/users').subscribe(
          (responseUser: any) => {
            const values = responseUser.$values;

            for (const user of values) {
              if (user.user === this.user && user.password === this.password) {
                this.userService.setTypePermission(user.typeID);
                break; 
              }
            }
          },
          (error) => {
            console.error('error al buscar users:', error);
          }
        );
      },
      (error) => {
        console.error('Error en la validaci√≥n de credenciales:', error);
        this.incorretCredentials = true;
      }
    );
  }